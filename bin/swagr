#!/usr/bin/env ruby
require 'rubygems'
require 'thor'
require 'fileutils'

require 'swagr'

SwagrSourceRoot = File.dirname(File.expand_path(__FILE__)).split("/")[0...-1].join("/")

SkeletonDir = "skeletons"
DefaultSkeletonTarball = "bootstrap_default_130109_0842.zip"
SkeletonTarball = File.join(SkeletonDir, DefaultSkeletonTarball)

StaticDir = PublicDir = "static"
DefaultSubdirs = ["coffee", "views", StaticDir]

def output_lines_from_running_command(command)
  `#{command}`.split("\n")
end

def first_output_line_matching(command, regexp)
  lines = output_lines_from_running_command command
  lines.each {|line| return line if line =~ regexp}
end

def create_dir(dir)
end

class SwagrCommand < Thor

  include Thor::Actions

  def self.source_root
    SwagrSourceRoot
  end

  desc "version", "Print the current version of swagr"
  def version
    say "Swagr version #{Swagr::VERSION} built #{Swagr::GemBuildDate}"
  end

  desc "upgrade", "Upgrade used libs by re-downloading the latest versions of needed libs. Might brake some of your code so use with caution."
  def upgrade
    inside File.join(SwagrSourceRoot, "templates", PublicDir, "js") do
      get "http://d3js.org/d3.v3.min.js"
      get "http://coffeescript.org/extras/coffee-script.js"
      get "http://code.jquery.com/jquery-latest.js"
      get "https://raw.github.com/square/crossfilter/master/crossfilter.min.js"
      get "https://raw.github.com/mbostock/d3/master/lib/colorbrewer/colorbrewer.js"

      # Now get the codemirror tarball and unpack it
      get "http://codemirror.net/codemirror.zip"
      # Find the name of the dir were files will be unpacked by "unzip -l" and parsing the lines until matches regexp
      re = /\s*0.+(codemirror-\d+.\d+.?\d*)\//
      line = first_output_line_matching "unzip -l codemirror.zip", re
      if line
        line =~ re
        codemirror_dir = $1
        say "Found codemirror unzipped to #{codemirror_dir}"
  
        run "unzip codemirror.zip"

        # Now copy from unpacked codemirror dir to our template dir
        FileUtils.rm_rf "codemirror" # Delete old dest dir so we get a fresh start
        empty_directory "codemirror"
        directory File.join(codemirror_dir, "lib"), "codemirror/lib"
        directory File.join(codemirror_dir, "keymap"), "codemirror/keymap"
        directory File.join(codemirror_dir, "mode"), "codemirror/mode"
        directory File.join(codemirror_dir, "theme"), "codemirror/theme"
      end

      # Cleanup after codemirror download and unpack
      FileUtils.rm_rf "codemirror.zip"
      say "Removed tarball"
      FileUtils.rm_rf codemirror_dir
      say "Removed unpacked codemirror dir"
    end

    inside File.join(SwagrSourceRoot, "templates", PublicDir, "css") do
      get "https://raw.github.com/mbostock/d3/master/lib/colorbrewer/colorbrewer.css"
    end

  end

  desc "init DIR", "Create (or update) a skeleton structure in DIR for customizing a swagr app. You should carefully review and answer the question it poses if you have updated any of the standard files. If not you risk losing your changes."
  def init(dir)
    empty_directory dir
    inside dir do
      DefaultSubdirs.each {|subdir| empty_directory(subdir)}
    end
    # Now copy everything in the templates dir into the 
    directory "templates", dir
  end

  desc "serve DIR", "Run a swagr app from DIR (will first copy the template files and then copy the files in DIR and then run. Ensures any files changed in DIR are the ones being executed."
  def serve(dir)
    tdir = File.join(dir, ".temp")
    invoke :create, [tdir]
    local_changes = File.join(dir, "local_changes")
    directory local_changes, tdir
    app = File.join(tdir, "app.rb")
    begin
      system "ruby #{app}"
    ensure
      FileUtils.rm_rf tdir
    end
  end

  desc "create DIR", "Create/setup a swagr app in DIR"
  def create(dir)
    init(dir)
    public_dir = File.join(dir, PublicDir)
    tarball = File.join(public_dir, "skeleton.zip")
    copy_file SkeletonTarball, tarball
    inside public_dir do
      run "unzip skeleton.zip"
      FileUtils.rm_rf "skeleton.zip"
      say "Removed tarball"
    end
  end

end

SwagrCommand.start