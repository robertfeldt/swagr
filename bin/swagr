#!/usr/bin/env ruby
require 'rubygems'
require 'thor'
require 'fileutils'
require 'coffee-script'

require 'swagr'

SwagrSourceRoot = File.dirname(File.expand_path(__FILE__)).split("/")[0...-1].join("/")

SkeletonDir = "skeletons"
DefaultSkeletonTarball = "bootstrap_default_130109_0842.zip"
SkeletonTarball = File.join(SkeletonDir, DefaultSkeletonTarball)

StaticDir = PublicDir = "public"
JsDir = File.join(StaticDir, "js")
CoffeescriptDir = File.join(JsDir, "coffee")
CoffeescriptSrcDir = File.join(SwagrSourceRoot, "site_template", "public", "coffee")
CoffeescriptDirAbsolute = File.join(SwagrSourceRoot, "site_template", CoffeescriptDir)
DefaultSubdirs = ["views", StaticDir, "config", "log", "tmp", 
  JsDir, File.join(StaticDir, "css"), CoffeescriptDir]

def output_lines_from_running_command(command)
  `#{command}`.split("\n")
end

def first_output_line_matching(command, regexp)
  lines = output_lines_from_running_command command
  lines.each {|line| return line if line =~ regexp}
end

class SwagrCommand < Thor

  include Thor::Actions

  def self.source_root
    SwagrSourceRoot
  end

  desc "version", "Print the current version of swagr"
  def version
    say "Swagr version #{Swagr::VERSION} built #{Swagr::GemBuildDate}"
  end

  desc "upgrade", "Upgrade used libs by re-downloading the latest versions of needed libs. Might brake some of your code so use with caution."
  def upgrade

    target_dir = File.join(SwagrSourceRoot, "external_libs", PublicDir)

    inside File.join(target_dir, "js") do
      get "http://d3js.org/d3.v3.min.js"
      get "http://coffeescript.org/extras/coffee-script.js"
      get "http://code.jquery.com/jquery-latest.js"
      get "https://raw.github.com/square/crossfilter/master/crossfilter.min.js"
      get "https://raw.github.com/mbostock/d3/master/lib/colorbrewer/colorbrewer.js"
      get "https://raw.github.com/misoproject/d3.chart/master/d3.chart.js"

      # Now get the codemirror tarball and unpack it
      get "http://codemirror.net/codemirror.zip"
      # Find the name of the dir were files will be unpacked by "unzip -l" and parsing the lines until matches regexp
      re = /\s*0.+(codemirror-\d+.\d+.?\d*)\//
      line = first_output_line_matching "unzip -l codemirror.zip", re
      if line
        line =~ re
        codemirror_dir = $1
        say "Found codemirror unzipped to #{codemirror_dir}"
  
        run "unzip codemirror.zip"

        # Now copy from unpacked codemirror dir to our template dir
        FileUtils.rm_rf "codemirror" # Delete old dest dir so we get a fresh start
        empty_directory "codemirror"
        directory File.join(codemirror_dir, "lib"), "codemirror/lib"
        directory File.join(codemirror_dir, "keymap"), "codemirror/keymap"
        directory File.join(codemirror_dir, "mode"), "codemirror/mode"
        directory File.join(codemirror_dir, "theme"), "codemirror/theme"
      end

      # Cleanup after codemirror download and unpack
      FileUtils.rm_rf "codemirror.zip"
      say "Removed tarball"
      FileUtils.rm_rf codemirror_dir
      say "Removed unpacked codemirror dir"
    end

    inside File.join(target_dir, "css") do
      get "https://raw.github.com/mbostock/d3/master/lib/colorbrewer/colorbrewer.css"
    end

  end

  desc "compile", "Compile coffeescript files to javascript"
  def compile
    Dir.foreach(CoffeescriptSrcDir) do |cf|
      unless cf == '.' || cf == '..'
        puts "compiling #{cf}"
        js = CoffeeScript.compile File.read( File.join(CoffeescriptSrcDir, cf) )
        dest_file = File.join CoffeescriptDirAbsolute, cf.gsub(/\.coffee$/, '.js')
        File.open(dest_file, 'w') {|fh| fh.puts(js)}
      end
    end
  end

  desc "init DIR", "Create (or update) a skeleton structure in DIR for customizing a swagr app. You should carefully review and answer the question it poses if you have updated any of the standard files. If not you risk losing your changes."
  def init(dir)

    # Compile all coffeescript files into js
    invoke :compile, []

    empty_directory dir

    inside dir do
      DefaultSubdirs.each {|subdir| empty_directory(subdir)}
    end

    # First copy the external libs.
    directory "external_libs", dir

    # Now copy the site_template into the dir.
    directory "site_template", dir

  end

  desc "serve DIR", "Run a swagr app from DIR (will first copy the template files and then copy the files in DIR and then run. Ensures any files changed in DIR are the ones being executed."
  method_option :delete, :type => :boolean, :default => false, :desc => "Delete the temp site after serving it"
  def serve(dir)

    # We serve it from a new copy of the dir
    tdir = File.join(".", "tmp", dir)

    # First create a fresh swagr site
    invoke :create, [tdir]

    # Copy any files in the dir to serve
    directory dir, tdir

    # Now start a thin server in the dir
    inside tdir do
      begin
        system "thin start -R config.ru"
      ensure
        FileUtils.rm_rf tdir if options[:delete]
      end
    end
  end

  desc "create DIR", "Create/setup a swagr app in DIR"
  def create(dir)

    init(dir)

    public_dir = File.join(dir, PublicDir)

    tarball = File.join(public_dir, "skeleton.zip")

    copy_file SkeletonTarball, tarball

    inside public_dir do
      run "unzip -o skeleton.zip"
      FileUtils.rm_rf "skeleton.zip"
      say "Removed tarball"
    end

  end

end

SwagrCommand.start