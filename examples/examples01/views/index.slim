h1 Hello, Swagr world!

/! Example A: Some static svg
div class="container"
  svg width="400" height="50"
    text x="0" y="35" font-family="Helvetica" font-size="20" SVG:
    circle cx="175" cy="25" r="20" fill="rgba(128, 0, 128, 1.0)"
    circle cx="200" cy="25" r="20" fill="rgba(0, 0, 255, 0.75)"
    circle cx="225" cy="25" r="20" fill="rgba(0, 255, 0, 0.5)"
    circle cx="250" cy="25" r="20" fill="rgba(255, 255, 0, 0.25)"
    circle cx="275" cy="25" r="20" fill="rgba(255, 0, 0, 0.1)"
    /! rect x="100" y="100" width="100" height="50"
    /! ellipse cx="150" cy="80" rx="50" ry="25" fill="red"
    /! line x1="0" y1="0" x2="300" y2="50" stroke="black"

/! Example B: Using d3 to add elements dynamically
script src="js/d3.v3.min.js"
div class="container" id="d3a"
div class="container" id="d3b"
script type="text/javascript"
  | var co = d3.select("#d3a");
    co.append("p").text("Hello, d3.js world!");

/! Example C: Coffee-script inline
script src="js/coffee-script.js"
div class="container" id="d3_from_coffeescript_a"
div class="container" id="d3_from_coffeescript_b"
/!script src="coffee/d3graph.js"
script type="text/coffeescript"
  | a = 1.5
    b = 2 + a
    str = "Hello, coffee-script and d3.js world! b = " + b + ". And now the same dataset from Coffee-script..."
    console.log(str)    
    d3.select("#d3_from_coffeescript_a").append("span").text(str)

    root = exports ? window

    class D3Graph
      default_options =
        width:                  960
        height:                 500
        transition_y_distance:  50
        update_interval:        1.75              # seconds
        xmapper:                (d, i) -> i * 70
        txtmapper:              (d, i) -> d
        transition_time:        600               # milliseconds

      constructor: (@selector, @dataUrl, opts = {}) ->
        @opts = @set_default_options_unless_given(opts, default_options)
        @_append_svg()
        @update()     # First update so we have something to show...

      set_default_options_unless_given: (givenOpts, defaultOpts) ->
        for own option, value of defaultOpts
          givenOpts[option] = value unless givenOpts.hasOwnProperty(option)
        givenOpts

      # Append the svg to the top-level selector
      _append_svg: () ->
        @svg = d3.select(@selector).append("svg")
                    .attr("width", @opts.width)
                    .attr("height", @opts.height)
                  .append("g")
                    .attr("transform", @_transform_string())

      # Start updating the graph
      start_updates: ->
        @interval_id = root.setInterval ( => @update() ), @opts.update_interval*1000

      # Stop updating the graph
      stop_updates: -> root.clearInterval(@interval_id)

      # Run the updates for a given number of seconds
      run_updates_for: (seconds) ->
        @start_updates()
        setTimeout ( => @stop_updates(); console.log("Stopped updating graph!"); ), seconds*1000

      update: ->
        d3.json(@dataUrl, (error, data) =>
          # D3's general update pattern:
          # 1. DATA JOIN - Join new data with old elements, if any, then update, enter and exit below.
          @elems = @_join_data(data)
          # 2. UPDATE - Update existing elements as needed.
          @_update_existing_elements()
          # 3. ENTER - Create new elements as needed.
          @_enter_new_elements()
          # 4. EXIT - Remove old elements as needed.
          @_remove_exiting_elements()
        )

    class TextArrayGraph extends D3Graph
      _transform_string: -> "translate(16," + (@opts.height / 2) + ")"

      _join_data: (data) -> @svg.selectAll("text").data(data, (d) -> d)

      _update_existing_elements: (text) ->
        @elems.attr("class", "update")
            .transition()
            .duration(@opts.transition_time)
            .attr("x", @opts.xmapper)

      _enter_new_elements: (text) ->
        @elems.enter().append("text")
            .attr("class", "enter")
            .attr("dy", ".35em")
            .attr("y", -@opts.transition_y_distance)
            .attr("x", @opts.xmapper)
            .style("fill-opacity", 1e-6)
            .text(@opts.txtmapper)
            .transition()
            .duration(@opts.transition_time)
            .attr("y", 0)
            .style("fill-opacity", 1)

      _remove_exiting_elements: (text) ->
        @elems.exit()
            .attr("class", "exit")
            .transition()
            .duration(@opts.transition_time)
            .attr("y", @opts.transition_y_distance)
            .style("fill-opacity", 1e-6)
            .remove()

    g = new TextArrayGraph "#d3_from_coffeescript_b", "/data/randints/arrayofsize5.json", {
      width:      500
      height:     120
      txtmapper:  (d, i) -> d + ","
    }
    g.run_updates_for(10)