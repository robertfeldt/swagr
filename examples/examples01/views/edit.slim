/! script src="js/coffee-script.js" type="text/javascript"
div class="container" id="code"
  textarea id="editor" cols="50" rows="5" style="width:30%"
    | # Hello
      # This looks ok. How very nice!
      a = 1 + 2

/! Container for the scatter plot
div class="container" id="scatterplot"

/! --------------------------------------------------------------
/! -- Include files needed by CodeMirror (CM)
/! --------------------------------------------------------------
link rel="stylesheet" href="js/codemirror/lib/codemirror.css"
script src="js/codemirror/lib/codemirror.js"

/! CM utils that you use:
script src="js/codemirror/lib/util/loadmode.js"

/! CM modes that you use:
script src="js/codemirror/mode/ruby/ruby.js"

/! CM themes that you use:
link rel="stylesheet" href="js/codemirror/theme/lesser-dark.css"

script type="text/javascript"
  | var editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
      lineNumbers: true,
      mode: "ruby",
      theme: "lesser-dark"
    });

script src="js/d3.v3.min.js"
script src="js/colorbrewer.js"
script src="js/coffee-script.js"
script type="text/coffeescript"
  | w = 500
    h = 500
    pad = 20
    left_pad = pad + 40
    Data_url = '/data/scatter.json'

    scatterplot = d3.select("#scatterplot")
      .append("svg")
      .attr("width", w)
      .attr("height", h)

    xscale = d3.scale.linear().domain([0.0, 2.0]).range([left_pad, w-pad])
    xAxis = d3.svg.axis().scale(xscale).orient("bottom")
    yscale = d3.scale.linear().domain([2.0, 0.0]).range([pad, h-pad*2])
    yAxis = d3.svg.axis().scale(yscale).orient("left")

    scatterplot.append("svg:g")
      .attr("class", "x axis")
      .attr("transform", "translate(0, "+(h-pad)+")")
      .call(xAxis)
    
    scatterplot.append("svg:g")
      .attr("class", "y axis")
      .attr("transform", "translate("+(left_pad-pad)+", 0)")
      .call(yAxis)

    colorscale = d3.scale.quantize() # can also try quantile()
      .range(colorbrewer.RdYlGn[11])

    duration_ms = 1000
    dist = 30

    draw_scatter_plot_from_url = (url) ->
      d3.json(url, (data) ->
        x_min = d3.min(data, ((d) -> d.fs[0]))
        x_max = d3.max(data, ((d) -> d.fs[0]))
        xscale.domain([x_min, x_max])
  
        y_min = d3.min(data, ((d) -> d.fs[1]))
        y_max = d3.max(data, ((d) -> d.fs[1]))
        yscale.domain([y_max, y_min])

        v_max = d3.max(data, ((d) -> d.v))
        v_min = d3.min(data, ((d) -> d.v))
        # Better to have low value and better is green so invert scale:
        colorscale.domain([v_max, v_min])
  
        # Join data
        circles = scatterplot.selectAll("circle")
          .data(data, ((d) -> d.id))

        # Now update the axes since the mins and maxs might have changed on the
        # scales
        t = scatterplot.transition().duration(1.5*duration_ms)
        t.select(".y.axis").call(yAxis)
        t.select(".x.axis").call(xAxis)

        # Update existing circles. This must happen before the enter transition
        # below!!

        # Enter new data points as circles. The update transition below
        # will 
        circles.enter().append("svg:circle")
          .attr("class", "circleenter")
          .attr("cx", ((d) -> xscale(d.fs[0])+dist))
          .attr("cy", ((d) -> yscale(d.fs[1])-dist))
          .attr("r", 0)
          .attr("opacity", 1e-6)
          .attr("fill", ((d) -> colorscale(d.v)))
          .attr("stroke", "black")

        circles
          .transition()
          .duration(1.5*duration_ms)
            .attr("r", 5)
            .attr("opacity", 0.80)
            .attr("cx", ((d) -> xscale(d.fs[0])))
            .attr("cy", ((d) -> yscale(d.fs[1])))

        # Exit circles.
        circles.exit()
          .attr("class", "circleexit")
          .transition()
          .duration(duration_ms)
          .attr("r", 0)
          .attr("opacity", 1e-6)
          .attr("cx", ((d) -> xscale(d.fs[0])-dist))
          .attr("cy", ((d) -> yscale(d.fs[1])+dist))
          .remove()
      )

    draw_scatter_plot_from_url(Data_url)
    setInterval((-> draw_scatter_plot_from_url(Data_url)), 2.0 * 1000)