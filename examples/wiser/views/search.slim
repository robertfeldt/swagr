/! Row with editor
div class="row-fluid"
  div class="span1" id="editorcontrols"
    input class="roundbutton redbutton" type="button" value="NO!" id="noBtn"
    input class="roundbutton orangebutton" type="button" value="Skip" id="skipBtn"
    input class="roundbutton greenbutton" type="button" value="YES!" id="yesBtn"
  div class="span6" id="code"
    textarea id="editor" cols="50" rows="10"
      | # Click a bubble below to add its test code here
  div class="span5"
  
/! Container for the search controls and charts
div class="row"
  div class="span1"
    input class="roundbutton greenbutton" type="button" value="Play" id="playBtn"
    input class="roundbutton orangebutton" type="button" value="Pause" id="pauseBtn"
    input class="roundbutton redbutton" type="button" value="Stop" id="stopBtn"
  div class="span11"
    div class="container" id="scatterplot"
    div class="container" id="scatterplot2"

/! --------------------------------------------------------------
/! -- Include files needed by CodeMirror (CM)
/! --------------------------------------------------------------
link rel="stylesheet" href="js/codemirror/lib/codemirror.css"
script src="js/codemirror/lib/codemirror.js"

/! CM utils that you use:
script src="js/codemirror/lib/util/loadmode.js"

/! CM modes that you use:
script src="js/codemirror/mode/ruby/ruby.js"

/! CM themes that you use:
link rel="stylesheet" href="js/codemirror/theme/lesser-dark.css"

script src="js/d3.v3.min.js"
script src="js/colorbrewer.js"
script src="js/coffee-script.js"
script src="coffee/d3graph.js"
script src="coffee/updating_scatterplot.js"
script type="text/coffeescript"
  | root = exports ? window

    capitalizeFirstChar = (s) -> s.charAt(0).toUpperCase() + s.slice(1)

    # This will be set to the datum which is currently being edited in the
    # CodeMirror window, if any.
    root.edited_datum = null

    # This will be set to an array of the orig lines whenever a new datum is
    # added to the editor window. Needed in gutter click handler if user wants
    # to go back to orig state for a line.
    root.orig_lines = null

    # Strip leading comment char and any trailing spaces from line.
    strip_leading_ruby_comment_marker = (line) ->
      matched = line.match /^(\s+)#(\s+)(.+)$/
      if matched == null
        line
      else
        # We include the leading spaces and the rest of the string after the
        # hash char and the space after it.
        matched[1] + matched[3]

    # Handler for gutter clicks. If the line is a Ruby comment, i.e. a line
    # with leading space followed by the comment hash "#" that char and any
    # following spaces will be stripped away. This turns the line into
    # Ruby code. This is a simple way for the back-end to propose asserts
    # for tests etc.
    gutter_click_handler = (codemirror, lineNumber, gutter, clickEvent) ->
      line = codemirror.getLine(lineNumber)
      orig_line = root.orig_lines[lineNumber]
      #console.log( "gutter click on line " + lineNumber + ": " + line + "\nThis line was originally: " + orig_line)
      if line == orig_line
        codemirror.setLine lineNumber, strip_leading_ruby_comment_marker(line)
      else
        codemirror.setLine lineNumber, orig_line

    root.editor = CodeMirror.fromTextArea(document.getElementById("editor"), {
      lineNumbers:  true,
      mode:         "ruby",
      theme:        "lesser-dark",
      height:       100
      gutterClick:  gutter_click_handler
    })
    # Does not seem to be enough to set the click handler as an option above...
    root.editor.on("gutterClick", gutter_click_handler)

    # Update the text area window when user clicks on data d.
    update_text_area_on_click = (d) ->
      root.edited_datum = d

      #console.log("clicked " + d.id + " from edit.slim")

      # String to be presented:
      str = JSON.stringify(d.candidate, null, 2)

      # We add a fake line for now that can be converted to Ruby code by the gutter click handler
      str = str + "\n  # [1].must_equal [1]"

      # Save all the orig lines of the string to be presented in case we do gutter clicks later
      root.orig_lines = str.split("\n")
      root.editor.setValue str

    g = new root.Swagr.UpdatingScatterplot "#scatterplot", '/data/optimization/archive.json', {
      width:            400
      height:           300
      left_pad:         50
      transition_time:  1500
      xfunc:            ((d) -> 
        x = d.subqs[0]
        console.log(x + " is NaN") if x == NaN
        x)
      yfunc:            ((d) -> d.subqs[1])
      colorvaluefunc:   ((d) -> d.qv)
      # "id", "qv", "qvd", "subqs", "candidate", "pos", "type"
      tooltipmapper:    ((d) ->
        if d.type == "specialist"
          s = d.type + " " + d.list_index + "."
        else
          s = d.type
        capitalizeFirstChar(s) + d.pos + "<br/>  <strong>Q</strong> = " + d.qvd.toPrecision(5) + 
          "%<br/>  <strong>SubQs</strong> = " + d.subqs[0].toPrecision(3) + ", " + d.subqs[1].toPrecision(3)
      )
      clickfunc:        update_text_area_on_click
    }
    g.start_updates()

    control_optimization = (urlEnding) ->
      url = "/data/optimization/controller/" + urlEnding + ".json"
      d3.json url, ((data, error) -> 
        console.log( "Changed mode to: " + urlEnding )
        null
      )

    $("#playBtn").click(() -> control_optimization "play")
    $("#pauseBtn").click(() -> control_optimization "pause")
    $("#stopBtn").click(() -> control_optimization "stop")