h1 Hello, Swagr world!

/! Example A: Some static svg
div class="container"
  svg width="400" height="50"
    text x="0" y="35" font-family="Helvetica" font-size="20" SVG:
    circle cx="175" cy="25" r="20" fill="rgba(128, 0, 128, 1.0)"
    circle cx="200" cy="25" r="20" fill="rgba(0, 0, 255, 0.75)"
    circle cx="225" cy="25" r="20" fill="rgba(0, 255, 0, 0.5)"
    circle cx="250" cy="25" r="20" fill="rgba(255, 255, 0, 0.25)"
    circle cx="275" cy="25" r="20" fill="rgba(255, 0, 0, 0.1)"
    /! rect x="100" y="100" width="100" height="50"
    /! ellipse cx="150" cy="80" rx="50" ry="25" fill="red"
    /! line x1="0" y1="0" x2="300" y2="50" stroke="black"

/! Example B: Using d3 to add elements dynamically
script src="js/d3.v3.min.js"
div class="container" id="d3a"
div class="container" id="d3b"
script type="text/javascript"
  | var co = d3.select("#d3a");
    co.append("p").text("Hello, d3.js world!");
    co.append("p").text("Now lets continuously get data from our Ruby back end and show them with d3");

    var values =  [0];

    var update_values = function() {
      d3.json("/data/randints/arrayofsize5.json", function(error, json) {
        values = json;
      });
    };

    update_values();

    var width = 600,
        height = 120,
        update_interval = 1.8;
    
    var svg = d3.select("#d3b").append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", "translate(16," + (height / 2) + ")");
    
    var update_display = function(values) {
      var xmapper = function(d, i) {return (i) * 70; },
          transition_time = 600,
          move_distance = (height*0.8)/2;

      // DATA JOIN
      // Join new data with old elements, if any.
      var text = svg.selectAll("text")
          .data(values, function(d) { return d; });
    
      // UPDATE
      // Update old elements as needed.
      text.attr("class", "update")
        .transition()
          .duration(transition_time)
          .attr("x", xmapper);
    
      // ENTER
      // Create new elements as needed.
      text.enter().append("text")
          .attr("class", "enter")
          .attr("dy", ".35em")
          .attr("y", -move_distance)
          .attr("x", xmapper)
          .style("fill-opacity", 1e-6)
          .text(function(d) { return d + ","; })
        .transition()
          .duration(transition_time)
          .attr("y", 0)
          .style("fill-opacity", 1);
    
      // EXIT
      // Remove old elements as needed.
      text.exit()
          .attr("class", "exit")
        .transition()
          .duration(transition_time)
          .attr("y", move_distance)
          .style("fill-opacity", 1e-6)
          .remove();
    };

    // Get initial data and update display.
    update_values();
    update_display(values);
    
    // Repeatedly get new data and update display.
    setInterval(function() {
      update_values();
      update_display(values);
    }, update_interval * 1000);

/! Example C: Coffee-script inline
script src="js/coffee-script.js"
div class="container" id="d3_from_coffeescript_a"
div class="container" id="d3_from_coffeescript_b"
script type="text/coffeescript"
  | a = 1.5
    b = 2 + a
    str = "Hello, coffee-script and d3.js world! b = " + b + ". And now the same dataset from Coffee-script..."
    console.log(str)    
    d3.select("#d3_from_coffeescript_a").append("span").text(str)

    # Options
    width = 600
    height = 120
    move_distance = (height*0.8)/2
    update_interval = 1.75        # seconds
    xmapper = (d, i) -> i * 70
    txtmapper = (d, i) -> d + ","
    transition_time = 600         # milliseconds
    
    svg = d3.select("#d3_from_coffeescript_b").append("svg")
        .attr("width", width)
        .attr("height", height)
      .append("g")
        .attr("transform", "translate(16," + (height / 2) + ")");
    
    update_display = () ->
      d3.json("/data/randints/arrayofsize5.json", (error, data) ->   
        # DATA JOIN - Join new data with old elements, if any.
        text = svg.selectAll("text")
            .data(data, (d) -> d)
      
        # UPDATE - Update old elements as needed.
        text.attr("class", "update")
          .transition()
            .duration(transition_time)
            .attr("x", xmapper)
      
        # ENTER - Create new elements as needed.
        text.enter().append("text")
            .attr("class", "enter")
            .attr("dy", ".35em")
            .attr("y", -move_distance)
            .attr("x", xmapper)
            .style("fill-opacity", 1e-6)
            .text(txtmapper)
          .transition()
            .duration(transition_time)
            .attr("y", 0)
            .style("fill-opacity", 1)
      
        # EXIT - Remove old elements as needed.
        text.exit()
            .attr("class", "exit")
          .transition()
            .duration(transition_time)
            .attr("y", move_distance)
            .style("fill-opacity", 1e-6)
            .remove()
      )

    # Get initial data and update display.
    update_display()

    # Repeatedly get new data and update display.
    setInterval(update_display, update_interval*1000)
